{
  "version": 3,
  "sources": ["../src/cli.ts", "../src/index.ts"],
  "sourcesContent": ["#!/usr/bin/env node\nimport yargs from \"yargs\";\nimport { hideBin } from \"yargs/helpers\";\nimport chromeDev from \"./index\";\n\ncli();\n\n/**\n *\n * @author: snomiao <snomiao@gmail.com>\n */\nexport default async function cli() {\n  const argv = await yargs(hideBin(process.argv))\n    .scriptName(\"chrome-dev\")\n    .string(\"extension\")\n    .describe(\"extension\", \"extension mode\")\n    .number(\"port\")\n    .describe(\"port\", \"open http://localhost:port\")\n    .boolean(\"dotenv\")\n    .describe(\"dotenv\", \"load .env setting\")\n    .boolean(\"devtools\")\n    .describe(\"devtools\", \"open devtools everypage\")\n    // .strict()\n    .alias(\"d\", \"devtools\")\n    .alias(\"e\", \"extension\")\n    .alias(\"p\", \"port\")\n    .alias(\"h\", \"help\")\n    .alias(\"v\", \"version\")\n    .help()\n    .version()\n    .epilog(\"(C) snomiao.com 2022\").argv;\n  await chromeDev({ ...argv, inputs: argv._.map(String) });\n}\n", "import { resolve } from \"path\";\nimport puppeteer from \"puppeteer\";\n// puppeteer.brows\n/**\n * chrome-dev\n * Author: snomiao <snomiao@gmail.com>\n */\nexport default async function chromeDev({\n  inputs = [] as string[],\n  extension = \"\",\n  openExtensionPage = undefined as boolean,\n  devtools = false,\n  ignoreHTTPSErrors = true,\n  ignoreDefaultArgs = false,\n  port = 0,\n  dotenv = true,\n  ...otherArgs\n} = {}) {\n  // console.log(\"otherArgs=\", otherArgs);\n\n  // open urls\n  const urls = new Set(inputs);\n\n  // TODO: match PORT=80, HOST=localhost, URL=localhost:80 and parse into URL\n  if (port) urls.add(`https://localhost:${port}/`);\n\n  const chromeArgs = [];\n  // load extension\n  if (extension) {\n    const extensionPath = resolve(process.cwd(), extension);\n    chromeArgs.push(`--load-extension=${extensionPath}`);\n    // urls.add(\"chrome://extensions\");\n  }\n  if (dotenv) {\n    await import(\"dotenv/config\");\n  }\n  // launch browser\n  const browser = await puppeteer.launch({\n    headless: false,\n    devtools,\n    ignoreDefaultArgs: ignoreDefaultArgs ? true : [\"--disable-extensions\"],\n    args: [...chromeArgs],\n    defaultViewport: null,\n    ignoreHTTPSErrors,\n  });\n\n  // need more page\n  if (urls.size) console.log(\"open urls: \", [...urls.values()]);\n  while ((await browser.pages()).length < urls.size) await browser.newPage();\n\n  const pages = await browser.pages();\n  await Promise.allSettled(pages.map((page, i) => page.goto([...urls.values()][i])));\n\n  console.log(\"All pages opened\");\n}\n"],
  "mappings": ";AACA,OAAOA,MAAW,QAClB,OAAS,WAAAC,MAAe,gBCFxB,OAAS,WAAAC,MAAe,OACxB,OAAOC,MAAe,YAMtB,eAAOC,EAAiC,CACtC,OAAAC,EAAS,CAAC,EACV,UAAAC,EAAY,GACZ,kBAAAC,EAAoB,OACpB,SAAAC,EAAW,GACX,kBAAAC,EAAoB,GACpB,kBAAAC,EAAoB,GACpB,KAAAC,EAAO,EACP,OAAAC,EAAS,MACNC,CACL,EAAI,CAAC,EAAG,CAIN,IAAMC,EAAO,IAAI,IAAIT,CAAM,EAGvBM,GAAMG,EAAK,IAAI,qBAAqBH,IAAO,EAE/C,IAAMI,EAAa,CAAC,EAEpB,GAAIT,EAAW,CACb,IAAMU,EAAgBd,EAAQ,QAAQ,IAAI,EAAGI,CAAS,EACtDS,EAAW,KAAK,oBAAoBC,GAAe,CAErD,CACIJ,GACF,KAAM,QAAO,iBAGf,IAAMK,EAAU,MAAMd,EAAU,OAAO,CACrC,SAAU,GACV,SAAAK,EACA,kBAAmBE,EAAoB,GAAO,CAAC,sBAAsB,EACrE,KAAM,CAAC,GAAGK,CAAU,EACpB,gBAAiB,KACjB,kBAAAN,CACF,CAAC,EAID,IADIK,EAAK,MAAM,QAAQ,IAAI,cAAe,CAAC,GAAGA,EAAK,OAAO,CAAC,CAAC,GACpD,MAAMG,EAAQ,MAAM,GAAG,OAASH,EAAK,MAAM,MAAMG,EAAQ,QAAQ,EAEzE,IAAMC,EAAQ,MAAMD,EAAQ,MAAM,EAClC,MAAM,QAAQ,WAAWC,EAAM,IAAI,CAACC,EAAMC,IAAMD,EAAK,KAAK,CAAC,GAAGL,EAAK,OAAO,CAAC,EAAEM,EAAE,CAAC,CAAC,EAEjF,QAAQ,IAAI,kBAAkB,CAChC,CDjDAC,EAAI,EAMJ,eAAOA,GAA6B,CAClC,IAAMC,EAAO,MAAMC,EAAMC,EAAQ,QAAQ,IAAI,CAAC,EAC3C,WAAW,YAAY,EACvB,OAAO,WAAW,EAClB,SAAS,YAAa,gBAAgB,EACtC,OAAO,MAAM,EACb,SAAS,OAAQ,4BAA4B,EAC7C,QAAQ,QAAQ,EAChB,SAAS,SAAU,mBAAmB,EACtC,QAAQ,UAAU,EAClB,SAAS,WAAY,yBAAyB,EAE9C,MAAM,IAAK,UAAU,EACrB,MAAM,IAAK,WAAW,EACtB,MAAM,IAAK,MAAM,EACjB,MAAM,IAAK,MAAM,EACjB,MAAM,IAAK,SAAS,EACpB,KAAK,EACL,QAAQ,EACR,OAAO,sBAAsB,EAAE,KAClC,MAAMC,EAAU,CAAE,GAAGH,EAAM,OAAQA,EAAK,EAAE,IAAI,MAAM,CAAE,CAAC,CACzD",
  "names": ["yargs", "hideBin", "resolve", "puppeteer", "chromeDev", "inputs", "extension", "openExtensionPage", "devtools", "ignoreHTTPSErrors", "ignoreDefaultArgs", "port", "dotenv", "otherArgs", "urls", "chromeArgs", "extensionPath", "browser", "pages", "page", "i", "cli", "argv", "yargs", "hideBin", "chromeDev"]
}
